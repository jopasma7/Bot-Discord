# üê≥ Script de gesti√≥n del Bot GT ES95 con Docker (PowerShell)
# Uso: .\docker-manager.ps1 [comando]

param(
    [Parameter(Position=0)]
    [string]$Command
)

# Colores para output (usando Write-Host)
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    switch ($Color) {
        "Red" { Write-Host $Message -ForegroundColor Red }
        "Green" { Write-Host $Message -ForegroundColor Green }
        "Yellow" { Write-Host $Message -ForegroundColor Yellow }
        "Blue" { Write-Host $Message -ForegroundColor Cyan }
        default { Write-Host $Message -ForegroundColor White }
    }
}

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-ColorOutput "üê≥ Gestor Docker - Bot GT ES95" "Blue"
    Write-Host ""
    Write-Host "Comandos disponibles:"
    Write-ColorOutput "  build        - Construir la imagen Docker" "Green"
    Write-ColorOutput "  start        - Iniciar el bot" "Green"
    Write-ColorOutput "  stop         - Detener el bot" "Green"
    Write-ColorOutput "  restart      - Reiniciar el bot" "Green"
    Write-ColorOutput "  logs         - Ver logs en tiempo real" "Green"
    Write-ColorOutput "  status       - Ver estado del contenedor" "Green"
    Write-ColorOutput "  shell        - Acceder al shell del contenedor" "Green"
    Write-ColorOutput "  update       - Actualizar y reiniciar el bot" "Green"
    Write-ColorOutput "  clean        - Limpiar im√°genes y contenedores unused" "Green"
    Write-ColorOutput "  backup       - Hacer backup de los datos" "Green"
    Write-ColorOutput "  setup        - Configuraci√≥n inicial" "Green"
}

# Funci√≥n para verificar que Docker est√° instalado
function Test-Docker {
    try {
        $null = docker --version
        $null = docker-compose --version
        return $true
    } catch {
        Write-ColorOutput "‚ùå Docker o Docker Compose no est√°n instalados" "Red"
        return $false
    }
}

# Funci√≥n de configuraci√≥n inicial
function Initialize-Setup {
    Write-ColorOutput "üõ†Ô∏è Configuraci√≥n inicial del Bot GT ES95" "Blue"
    
    # Verificar archivo de entorno
    if (!(Test-Path "gt-bot.env")) {
        Write-ColorOutput "üìù Creando archivo de configuraci√≥n..." "Yellow"
        Copy-Item "gt-bot.env.example" "gt-bot.env"
        Write-ColorOutput "‚úÖ Archivo gt-bot.env creado" "Green"
        Write-ColorOutput "‚ö†Ô∏è IMPORTANTE: Edita gt-bot.env con tus tokens de Discord" "Yellow"
    } else {
        Write-ColorOutput "‚úÖ Archivo gt-bot.env ya existe" "Green"
    }
    
    # Crear directorios necesarios
    Write-ColorOutput "üìÅ Creando directorios necesarios..." "Blue"
    New-Item -ItemType Directory -Force -Path "data" | Out-Null
    New-Item -ItemType Directory -Force -Path "logs" | Out-Null
    Write-ColorOutput "‚úÖ Directorios creados" "Green"
    
    Write-ColorOutput "üéØ Configuraci√≥n completada" "Blue"
    Write-ColorOutput "‚û°Ô∏è Siguiente paso: editar gt-bot.env con tus credenciales" "Yellow"
    Write-ColorOutput "‚û°Ô∏è Despu√©s ejecutar: .\docker-manager.ps1 build" "Yellow"
}

# Funci√≥n para construir la imagen
function Build-Image {
    Write-ColorOutput "üî® Construyendo imagen Docker..." "Blue"
    docker-compose build --no-cache
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Imagen construida exitosamente" "Green"
    } else {
        Write-ColorOutput "‚ùå Error construyendo imagen" "Red"
    }
}

# Funci√≥n para iniciar el bot
function Start-Bot {
    Write-ColorOutput "üöÄ Iniciando Bot GT ES95..." "Blue"
    docker-compose up -d
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Bot iniciado" "Green"
        Write-ColorOutput "üìã Para ver logs: .\docker-manager.ps1 logs" "Blue"
    } else {
        Write-ColorOutput "‚ùå Error iniciando bot" "Red"
    }
}

# Funci√≥n para detener el bot
function Stop-Bot {
    Write-ColorOutput "üõë Deteniendo Bot GT ES95..." "Yellow"
    docker-compose down
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Bot detenido" "Green"
    } else {
        Write-ColorOutput "‚ùå Error deteniendo bot" "Red"
    }
}

# Funci√≥n para reiniciar el bot
function Restart-Bot {
    Write-ColorOutput "üîÑ Reiniciando Bot GT ES95..." "Blue"
    docker-compose restart
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Bot reiniciado" "Green"
    } else {
        Write-ColorOutput "‚ùå Error reiniciando bot" "Red"
    }
}

# Funci√≥n para ver logs
function Show-Logs {
    Write-ColorOutput "üìã Logs del Bot GT ES95 (Ctrl+C para salir):" "Blue"
    docker-compose logs -f gt-discord-bot
}

# Funci√≥n para ver estado
function Show-Status {
    Write-ColorOutput "üìä Estado del Bot GT ES95:" "Blue"
    docker-compose ps
    Write-Host ""
    Write-ColorOutput "üíæ Uso de recursos:" "Blue"
    try {
        docker stats gt-discord-bot --no-stream
    } catch {
        Write-Host "Contenedor no est√° ejecut√°ndose"
    }
}

# Funci√≥n para acceder al shell
function Enter-Shell {
    Write-ColorOutput "üêö Accediendo al shell del contenedor..." "Blue"
    docker-compose exec gt-discord-bot /bin/sh
}

# Funci√≥n para actualizar
function Update-Bot {
    Write-ColorOutput "üîÑ Actualizando Bot GT ES95..." "Blue"
    docker-compose down
    docker-compose build --no-cache
    docker-compose up -d
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Bot actualizado y reiniciado" "Green"
    } else {
        Write-ColorOutput "‚ùå Error actualizando bot" "Red"
    }
}

# Funci√≥n para limpiar
function Clean-Docker {
    Write-ColorOutput "üßπ Limpiando im√°genes y contenedores unused..." "Yellow"
    docker system prune -f
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ Limpieza completada" "Green"
    } else {
        Write-ColorOutput "‚ùå Error en limpieza" "Red"
    }
}

# Funci√≥n para backup
function Create-Backup {
    Write-ColorOutput "üíæ Creando backup de datos..." "Blue"
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupDir = "backup_$timestamp"
    
    New-Item -ItemType Directory -Force -Path "backups\$backupDir" | Out-Null
    Copy-Item -Recurse "data" "backups\$backupDir\"
    
    if (Test-Path "gt-bot.env") {
        Copy-Item "gt-bot.env" "backups\$backupDir\"
    }
    
    Write-ColorOutput "‚úÖ Backup creado en: backups\$backupDir" "Green"
}

# Funci√≥n principal
function Main {
    if (!(Test-Docker)) {
        exit 1
    }
    
    switch ($Command.ToLower()) {
        "build" { Build-Image }
        "start" { Start-Bot }
        "stop" { Stop-Bot }
        "restart" { Restart-Bot }
        "logs" { Show-Logs }
        "status" { Show-Status }
        "shell" { Enter-Shell }
        "update" { Update-Bot }
        "clean" { Clean-Docker }
        "backup" { Create-Backup }
        "setup" { Initialize-Setup }
        "help" { Show-Help }
        "" { Show-Help }
        default {
            Write-ColorOutput "‚ùå Comando desconocido: $Command" "Red"
            Write-Host ""
            Show-Help
            exit 1
        }
    }
}

# Ejecutar funci√≥n principal
Main